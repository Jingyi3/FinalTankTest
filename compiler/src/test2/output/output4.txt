(constsym,   const)
(ident,   a1)
(becomes,   :=)
(number,   100)
(semicolon,   ;)
(varsym,   var)
(ident,   b1)
(comma,   ,)
(ident,   b2)
(semicolon,   ;)
(proceduresym,   procedure)
(ident,   p)
(semicolon,   ;)
(beginsym,   begin)
(ident,   a1)
(becomes,   :=)
(ident,   b2)
(slash,   /)
(number,   2)
(semicolon,   ;)
(endsym,   end)
(beginsym,   begin)
(readsym,   read)
(Lparen,   ()
(ident,   b1)
(rparen,   ))
(semicolon,   ;)
(ident,   b2)
(becomes,   :=)
(ident,   b1)
(plus,   +)
(ident,   a1)
(semicolon,   ;)
(whilesym,   while)
(Lparen,   ()
(ident,   a1)
(eql,   =)
(ident,   0)
(rparen,   ))
(dosym,   do)
(beginsym,   begin)
(callsym,   call)
(ident,   p)
(semicolon,   ;)
(endsym,   end)
(semicolon,   ;)
(ifsym,   if)
(oddsym,   odd)
(Lparen,   ()
(ident,   b2)
(rparen,   ))
(thensym,   then)
(beginsym,   begin)
(writesym,   write)
(Lparen,   ()
(ident,   b2)
(rparen,   ))
(semicolon,   ;)
(endsym,   end)
(semicolon,   ;)
(number,   1)
(ERROR!!!,   :)
(number,   2)
(semicolon,   ;)
(number,   2)
(ident,   ==)
(number,   3)
(semicolon,   ;)
(endsym,   end)
(period,   .)
